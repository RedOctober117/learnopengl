#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <cmath>
#include "shader.h"

/// @brief Callback to handle window resizing.
/// @param window GLFWwindow window to be resized.
/// @param width int size.
/// @param height int size.
void framebuffer_size_callback(GLFWwindow *window, int width, int height);

/// @brief Callback to process input to the window.
/// @param window GLFWwindow window receiving input.
void processInput(GLFWwindow *window);

int main()
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow *window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window." << std::endl;
        return -1;
    }
    glfwMakeContextCurrent(window);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    glViewport(0, 0, 800, 600);

    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    Shader shader("shaders/shader.vs", "shaders/shader.fs");

    // x, y, z
    float vertices[] = {
        // positions         // colors
        0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 0.0f,  // bottom right
        -0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f, // bottom left
        0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f,   // top
        0.5f, 0.0f, 0.5f, 1.0f, 0.0f, 0.0f,   // back
    };

    // vars to hold the ID references to the given opjects generated by openGL
    unsigned int VBO; // Vertex Buffer Object: stores large number of vertices in GPU memory
    unsigned int VAO; // Vertex Array Object: stores configurate data for vertices

    glGenBuffers(1, &VBO);      // Returns a reference ID for the instantiated buffer object
    glGenVertexArrays(1, &VAO); // Returns a reference ID for the instantiated array object

    glBindVertexArray(VAO);             // Sets the currently bound VAO. All future changes will modify this VAO until a different one is bound.
    glBindBuffer(GL_ARRAY_BUFFER, VBO); // Set the currently bound array buffer to our Vertex Buffer Object.

    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); // Copy the data of our vertices into the currently bound buffer.

    // The following describes the index of the attribute to be modified, its
    // size, type, normalization, stride, and offset. Stride is the byte space
    // that a single attribute occupies. Offset describes where the data begins
    // in the buffer. This information is stored in the currently bound vertex
    // array object.
    // In this case, the first attribute of the vertex is the position,
    // occupying the first three sizeof(float)s in the element. The total
    // attribute size is 6 sizeof(float)s, and this attrbute begins at the
    // (void *)0th offset.
    glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)0);
    glEnableVertexAttribArray(0); // Enable the vertex attrbute we just create.

    // Our second attrbiute, taking three more sizeof(float)s, begins three
    // (void *)sizeof(float)s in.
    glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)(3 * sizeof(float)));
    // Enable this one too.
    glEnableVertexAttribArray(1);

    // The main loop. Runs until notice to close the window is received.
    while (!glfwWindowShouldClose(window))
    {
        // Immediately process input each frame.
        processInput(window);

        // Declares the color to use to clear the next buffer. Green, in this case.
        glClearColor(0.2f, 0.3f, 0.3f, 0.5f);
        // Clears the color of the immediate buffer to the color defined above.
        glClear(GL_COLOR_BUFFER_BIT);

        shader.use();

        // Bind the vertex array we established before. Vertices drawn after
        // this call will use the attrbiutes defined in VAO.
        glBindVertexArray(VAO);

        // Draws the vertices in the currently bound vertex buffer object.
        // Specify the primitive to draw, the starting index, and the number of
        // vertices to draw.
        glDrawArrays(GL_TRIANGLES, 0, 4);

        // Swap the currently displayed buffer with the one drawn by the calls
        // above this line.
        glfwSwapBuffers(window);

        // Handle window resizing and other callbacks in the queue.
        glfwPollEvents();
    }

    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glfwTerminate();
    return 0;
}

void framebuffer_size_callback(GLFWwindow *window, int width, int height)
{
    glViewport(0, 0, width, height);
}

void processInput(GLFWwindow *window)
{
    // Escape quits the window.
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
    {
        glfwSetWindowShouldClose(window, true);
    }
}